// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// initialization_discrete
arma::vec initialization_discrete(arma::vec YZ, int K);
RcppExport SEXP TestMix_initialization_discrete(SEXP YZSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type YZ(YZSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(initialization_discrete(YZ, K));
    return rcpp_result_gen;
END_RCPP
}
// log_poisson_likelihood_mix
arma::vec log_poisson_likelihood_mix(arma::vec Y, double psi, double mu, int n, arma::vec log_factorial_Y);
RcppExport SEXP TestMix_log_poisson_likelihood_mix(SEXP YSEXP, SEXP psiSEXP, SEXP muSEXP, SEXP nSEXP, SEXP log_factorial_YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type log_factorial_Y(log_factorial_YSEXP);
    rcpp_result_gen = Rcpp::wrap(log_poisson_likelihood_mix(Y, psi, mu, n, log_factorial_Y));
    return rcpp_result_gen;
END_RCPP
}
// gradient_all_mix
arma::vec gradient_all_mix(arma::vec Y, arma::vec Z, double psi, double mu, arma::vec posterior_y, arma::vec posterior_z, int n1, int n2);
RcppExport SEXP TestMix_gradient_all_mix(SEXP YSEXP, SEXP ZSEXP, SEXP psiSEXP, SEXP muSEXP, SEXP posterior_ySEXP, SEXP posterior_zSEXP, SEXP n1SEXP, SEXP n2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type posterior_y(posterior_ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type posterior_z(posterior_zSEXP);
    Rcpp::traits::input_parameter< int >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< int >::type n2(n2SEXP);
    rcpp_result_gen = Rcpp::wrap(gradient_all_mix(Y, Z, psi, mu, posterior_y, posterior_z, n1, n2));
    return rcpp_result_gen;
END_RCPP
}
// gradient_all_combined_mix
arma::vec gradient_all_combined_mix(arma::vec Y, double psi, double mu, arma::vec posterior, int n);
RcppExport SEXP TestMix_gradient_all_combined_mix(SEXP YSEXP, SEXP psiSEXP, SEXP muSEXP, SEXP posteriorSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type posterior(posteriorSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(gradient_all_combined_mix(Y, psi, mu, posterior, n));
    return rcpp_result_gen;
END_RCPP
}
// test_stepsize_for_psi_mix
double test_stepsize_for_psi_mix(arma::vec Y, double gra_psi, double ll, double psi, double mu, arma::vec posterior, int n, double gamma, double down, arma::vec log_factorial_Y);
RcppExport SEXP TestMix_test_stepsize_for_psi_mix(SEXP YSEXP, SEXP gra_psiSEXP, SEXP llSEXP, SEXP psiSEXP, SEXP muSEXP, SEXP posteriorSEXP, SEXP nSEXP, SEXP gammaSEXP, SEXP downSEXP, SEXP log_factorial_YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type gra_psi(gra_psiSEXP);
    Rcpp::traits::input_parameter< double >::type ll(llSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type posterior(posteriorSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type down(downSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type log_factorial_Y(log_factorial_YSEXP);
    rcpp_result_gen = Rcpp::wrap(test_stepsize_for_psi_mix(Y, gra_psi, ll, psi, mu, posterior, n, gamma, down, log_factorial_Y));
    return rcpp_result_gen;
END_RCPP
}
// test_stepsize_for_mu_mix
double test_stepsize_for_mu_mix(arma::vec Y, double gra_mu, double ll, double psi, double mu, arma::vec posterior, int n, double gamma, double down, arma::vec log_factorial_Y);
RcppExport SEXP TestMix_test_stepsize_for_mu_mix(SEXP YSEXP, SEXP gra_muSEXP, SEXP llSEXP, SEXP psiSEXP, SEXP muSEXP, SEXP posteriorSEXP, SEXP nSEXP, SEXP gammaSEXP, SEXP downSEXP, SEXP log_factorial_YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type gra_mu(gra_muSEXP);
    Rcpp::traits::input_parameter< double >::type ll(llSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type posterior(posteriorSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type down(downSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type log_factorial_Y(log_factorial_YSEXP);
    rcpp_result_gen = Rcpp::wrap(test_stepsize_for_mu_mix(Y, gra_mu, ll, psi, mu, posterior, n, gamma, down, log_factorial_Y));
    return rcpp_result_gen;
END_RCPP
}
// gradient_descent_mix
arma::vec gradient_descent_mix(arma::vec Y, arma::mat posterior_mat, arma::vec psi_vec, arma::vec mu_vec, arma::vec log_factorial_Y, int n, int K, int steps, double gamma, double down);
RcppExport SEXP TestMix_gradient_descent_mix(SEXP YSEXP, SEXP posterior_matSEXP, SEXP psi_vecSEXP, SEXP mu_vecSEXP, SEXP log_factorial_YSEXP, SEXP nSEXP, SEXP KSEXP, SEXP stepsSEXP, SEXP gammaSEXP, SEXP downSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type posterior_mat(posterior_matSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type psi_vec(psi_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_vec(mu_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type log_factorial_Y(log_factorial_YSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type down(downSEXP);
    rcpp_result_gen = Rcpp::wrap(gradient_descent_mix(Y, posterior_mat, psi_vec, mu_vec, log_factorial_Y, n, K, steps, gamma, down));
    return rcpp_result_gen;
END_RCPP
}
// take_exp_weight
arma::rowvec take_exp_weight(arma::rowvec x);
RcppExport SEXP TestMix_take_exp_weight(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(take_exp_weight(x));
    return rcpp_result_gen;
END_RCPP
}
// log_factorial
double log_factorial(int Y);
RcppExport SEXP TestMix_log_factorial(SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(log_factorial(Y));
    return rcpp_result_gen;
END_RCPP
}
// log_factorial_calculated
arma::vec log_factorial_calculated(int N);
RcppExport SEXP TestMix_log_factorial_calculated(SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(log_factorial_calculated(N));
    return rcpp_result_gen;
END_RCPP
}
// EM_discrete_mix
Rcpp::List EM_discrete_mix(arma::vec YZ, arma::vec psi_vec, int K, int n, int steps, int iter, double gamma, double down);
RcppExport SEXP TestMix_EM_discrete_mix(SEXP YZSEXP, SEXP psi_vecSEXP, SEXP KSEXP, SEXP nSEXP, SEXP stepsSEXP, SEXP iterSEXP, SEXP gammaSEXP, SEXP downSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type YZ(YZSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type psi_vec(psi_vecSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type down(downSEXP);
    rcpp_result_gen = Rcpp::wrap(EM_discrete_mix(YZ, psi_vec, K, n, steps, iter, gamma, down));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"TestMix_initialization_discrete", (DL_FUNC) &TestMix_initialization_discrete, 2},
    {"TestMix_log_poisson_likelihood_mix", (DL_FUNC) &TestMix_log_poisson_likelihood_mix, 5},
    {"TestMix_gradient_all_mix", (DL_FUNC) &TestMix_gradient_all_mix, 8},
    {"TestMix_gradient_all_combined_mix", (DL_FUNC) &TestMix_gradient_all_combined_mix, 5},
    {"TestMix_test_stepsize_for_psi_mix", (DL_FUNC) &TestMix_test_stepsize_for_psi_mix, 10},
    {"TestMix_test_stepsize_for_mu_mix", (DL_FUNC) &TestMix_test_stepsize_for_mu_mix, 10},
    {"TestMix_gradient_descent_mix", (DL_FUNC) &TestMix_gradient_descent_mix, 10},
    {"TestMix_take_exp_weight", (DL_FUNC) &TestMix_take_exp_weight, 1},
    {"TestMix_log_factorial", (DL_FUNC) &TestMix_log_factorial, 1},
    {"TestMix_log_factorial_calculated", (DL_FUNC) &TestMix_log_factorial_calculated, 1},
    {"TestMix_EM_discrete_mix", (DL_FUNC) &TestMix_EM_discrete_mix, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_TestMix(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
